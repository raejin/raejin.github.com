<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | WATCH AND LEARN]]></title>
  <link href="http://raejin.github.com/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://raejin.github.com/"/>
  <updated>2013-10-12T11:02:21-07:00</updated>
  <id>http://raejin.github.com/</id>
  <author>
    <name><![CDATA[Rae Liu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[EC2 adventurous]]></title>
    <link href="http://raejin.github.com/blog/2013/07/01/ec2-adventurous/"/>
    <updated>2013-07-01T21:38:00-07:00</updated>
    <id>http://raejin.github.com/blog/2013/07/01/ec2-adventurous</id>
    <content type="html"><![CDATA[<p>It's already July! Omg time flies when it comes to summer time.</p>

<p>Update: recently I've been very involved in my internship project. I can't expose the detail but basically I am working with AngularJS extensively. Though I am still very far from an experienced AngularJS developer, I must say IT IS A BEAUTIFUL WEB FRONT-END FRAMEWORK.</p>

<p>Currently I am working on a project called "yolyo" (temporarily name), which is based on an open source forum Discourse. Since Discourse requires quite a bit of computing resources, I decided to use Amazon EC2 as our starting point. As I realized how important it is to configure a virtual instance, I would like to dedicate this post to document all the works I've put into to make things work smoothly.</p>

<p>First of all, I would like to thank BitNami providing one-click Discourse installation to deploy on EC2. Otherwise, I would've still struggled with all the nitty gritty deployment detail.</p>

<h2>How to deploy/update by Git</h2>

<p>This has confused me for a long while. I had been used to deploy virtually everything by drag and drop for so long. Though I've learnt how to use Git to do versioning, I do not know how to setup the cloud server so that I can simply do <code>git push origin master</code> to deploy the changes.</p>

<p>Although I finally figured out how to use Git to deploy remote instance, I realized this workflow doesn't work really well with Discourse. Discourse itself already contains a git repo, so I would need to push to a remote repo and deploy the instance by pulling from this remote repo. (If anyone knows a better deployment strategy, please let me know)</p>

<h2>On remote machine</h2>

<p>create a git repo as a transition to deploy to a designated directory</p>

<ul>
<li>Copy local machine public key to the remote server (ec2 instance)
<code>bash
$ cat ~/.ssh/id_rsa.pub | ssh -i ~/.ssh/amazonKey.pem ubuntu@example.com "cat &gt;&gt; ~/.ssh/authorized_keys"
</code></li>
<li>Create and initialize a new git repo
<code>bash
$ mkdir website.git &amp;&amp; cd website.git
$ git init --bare
</code></li>
<li>Configure the post-receive hook in order to put the files into desired directory
``` bash
$ cat > hooks/post-receive

<h1>!/bin/sh</h1>

<p>GIT_WORK_TREE=/home/ubuntu/website
export GIT_WORK_TREE
git checkout -f
```</p></li>
<li>Make the post-receive file executable</li>
</ul>


<p><code>bash
$ chmod +x hooks/post-receive
</code></p>

<ul>
<li>Configure <code>hooks/post-update</code> file
``` bash

<h1>!/bin/sh</h1>

#

<h1>This hook does two things:</h1>

#

<h1>1. update the "info" files that allow the list of references to be</h1>

<h1>queries over dumb transports such as http</h1>

#

<h1>2. if this repository looks like it is a non-bare repository, and</h1>

<h1>the checked-out branch is pushed to, then update the working copy.</h1>

<h1>This makes "push" function somewhat similarly to darcs and bzr.</h1>

#

<h1>To enable this hook, make this file executable by "chmod +x post-update".</h1></li>
</ul>


<p>git update-server-info</p>

<p>is_bare=$(git config --get --bool core.bare)</p>

<p>if [ -z "$is_bare" ]
then</p>

<pre><code>    # for compatibility's sake, guess
    git_dir_full=$(cd $GIT_DIR; pwd)
    case $git_dir_full in */.git) is_bare=false;; *) is_bare=true;; esac
</code></pre>

<p>fi</p>

<p>update_wc() {</p>

<pre><code>    ref=$1
    echo "Push to checked out branch $ref" &gt;&amp;2
    if [ ! -f $GIT_DIR/logs/HEAD ]
    then
            echo "E:push to non-bare repository requires a HEAD reflog" &gt;&amp;2
            exit 1
    fi
    if (cd $GIT_WORK_TREE; git diff-files -q --exit-code &gt;/dev/null)
    then
            wc_dirty=0
    else
            echo "W:unstaged changes found in working copy" &gt;&amp;2
            wc_dirty=1
            desc="working copy"
    fi
    if git diff-index --cached HEAD@{1} &gt;/dev/null
    then
            index_dirty=0
    else
            echo "W:uncommitted, staged changes found" &gt;&amp;2
            index_dirty=1
            if [ -n "$desc" ]
            then
                    desc="$desc and index"
            else
                    desc="index"
            fi
    fi
    if [ "$wc_dirty" -ne 0 -o "$index_dirty" -ne 0 ]
    then
</code></pre>

<p><code>
- Make `hooks/post-update` executible
</code> bash
$ chmod +x post-update
```</p>

<h2>On local machine</h2>

<p>I'm lazy to explicitly write out the steps here. I will just refer to the <a href="http://stackoverflow.com/questions/225291/git-upload-pack-command-not-found-how-to-fix-this-correctly">StackOverflow page</a> that helped me solve this problem.</p>

<h2>Side note</h2>

<p>After all the above hassle I suddenly realized that I do not need any of these setup. Because I shall rely on a remote (e.q. GitHub) to host the repo, so the remote machine can easily pull from this remote repo. Though it is true that I am not currently working collaboratively with anybody else, this is a good deployment/development practice.</p>

<h3>Reference</h3>

<ul>
<li><a href="http://www.jeffhoefs.com/2012/09/setup-git-deploy-for-aws-ec2-ubuntu-instance/">Setup git deploy for AWS ec2 Ubuntu instance</a></li>
<li><a href="http://stackoverflow.com/questions/225291/git-upload-pack-command-not-found-how-to-fix-this-correctly">StackOverflow - git-upload-pack: command not found, how to fix this correctly</a></li>
<li><a href="http://alestic.com/2010/10/ec2-ssh-keys">Uploading Personal ssh Keys to Amazon EC2 </a></li>
<li><a href="http://blog.gbinghan.com/2012/05/setting-up-repo-on-amazon-ec2-for-git.html">Setting up Repo on Amazon EC2 for Git Push </a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SelfControl Saves My Final Grades]]></title>
    <link href="http://raejin.github.com/blog/2013/05/15/selfcontrol-saves-my-final-grades/"/>
    <updated>2013-05-15T21:13:00-07:00</updated>
    <id>http://raejin.github.com/blog/2013/05/15/selfcontrol-saves-my-final-grades</id>
    <content type="html"><![CDATA[<p>Alright, I know the title is a bit off. I could’ve still suffered if I don’t study well enough to handle the finals. I’ve discovered a OSX application called SelfControl to prevent me from wondering on social websites occasionally for a period of time.</p>

<p><a href="http://selfcontrolapp.com/">This app</a> is really awesome if you are the kind of person like me who lacks self-discipline whenever there is a need to focus. Well, mainly the reason is I don’t really like the material and it is hard in general, so that pushed me off from being proactive about the finals.</p>

<p>Fortunately, this app is powerful enough to keep me from cracking the rules. It claims that after the rules are set, there is no way to break the rules even uninstalling the app. So there you have it! In case someone is looking for some help to get focused studying for exams.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hex Color Picker for Mac]]></title>
    <link href="http://raejin.github.com/blog/2013/04/06/hex-color-picker-for-mac/"/>
    <updated>2013-04-06T21:08:00-07:00</updated>
    <id>http://raejin.github.com/blog/2013/04/06/hex-color-picker-for-mac</id>
    <content type="html"><![CDATA[<p>Whenever I need to decide a specific color to use, I always consult my sweet Photoshop CS6 since it runs pretty smooth on my laptop. But this is an overkill, opening up Photoshop simply for picking a color sounds so stupid and I’ve been doing this for years.</p>

<p>Luckily, I stumble upon <a href="http://yuji.wordpress.com/2010/08/01/mac-adding-hex-color-picker-to-color-picker/">this article</a> about how to configure a light-weight hex color picker app on a Mac. Although the article clearly maps out all the steps, I am still presenting it here:</p>

<ol>
<li>Download <a href="http://wafflesoftware.net/hexpicker/">Hex Color Picker</a></li>
<li>Open AppleScript Editor</li>
<li>Write the desired app name i.e. <code>ColorPicker</code></li>
<li>Save as a file with <code>.app</code> as file extension</li>
<li>Move the file <code>HexColorPicker.colorPicker</code> to <code>~/Library/ColorPickers</code></li>
</ol>


<p>Simple, elegant, no more Photoshop :)</p>
]]></content>
  </entry>
  
</feed>
